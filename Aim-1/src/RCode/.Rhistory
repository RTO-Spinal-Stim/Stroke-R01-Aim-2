debugSource("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
tablePath = "Y:\LabMembers\MTillman\SavedOutcomes\StrokeSpinalStim\CycleTable.csv"
tablePath = "Y:\\LabMembers\\MTillman\\SavedOutcomes\\StrokeSpinalStim\\CycleTable.csv"
data <- read.csv(tablePath)
nCols = 6
source('plotCycleData.R')
debugSource("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
outcome_cols
outcome_cols <- outcome_cols %>%
filter(!is.na(outcome_cols))
outcome_cols <- outcome_cols[!is.na(outcome_cols)]
outcome_cols
debugSource("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
outcome
View(plot_data)
View(speed_data)
plot_name
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
all_plots
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
debugSource("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
View(speed_data)
debugSource("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
unique(speed_data$InterventionPrePost)
sort(unique(speed_data$InterventionPrePost))
View(speed_data)
debugSource("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
debugSource("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
View(speed_data)
speed_data$InterventionPrePost
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
debugSource("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
View(speed_data)
levels(speed_data$InterventionPrePost)
interventions_prepost_ordered
interventions_prepost_ordered
unique(speed_data$InterventionPrePost)
sort(unique(speed_data$InterventionPrePost))
sort(unique(speed_data$InterventionPrePost))
sort(as.character(unique(speed_data$InterventionPrePost)))
speed_data <- speed_data %>%
mutate(InterventionPrePost = factor(InterventionPrePost, levels = interventions_prepost_ordered))
print(unique(speed_data$InterventionPrePost))
speed_data <- speed_data %>%
mutate(InterventionPrePost = factor(InterventionPrePost, levels = interventions_prepost_ordered))
print(levels(speed_data$InterventionPrePost))
speed_data <- speed_data %>%
mutate(InterventionPrePost = factor(InterventionPrePost, levels = interventions_prepost_ordered))
View(speed_data)
interventions_prepost_ordered
as.character(unique(speed_data$InterventionPrePost))
c("A", "B")
interventions_prepost_ordered <- as.character(sort(as.character(unique(speed_data$InterventionPrePost))))
interventions_prepost_ordered
speed_data <- speed_data %>%
mutate(InterventionPrePost = factor(InterventionPrePost, levels = interventions_prepost_ordered))
print(levels(speed_data$InterventionPrePost))
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
debugSource("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
debugSource("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
debugSource("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
interventions_pre_post_ordered
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
source("Y:/LabMembers/MTillman/GitRepos/Stroke-R01/RCode/plotCycleData.R")
R.home()
install.packages("stats")
install.packages("stats")
############################
## CONFIG
############################
# Read the config file
config_path <- "Y:\\LabMembers\\MTillman\\GitRepos\\siesta\\src\\peak_occ_nights_within_subject.toml"
config <- configr::read.config(file = config_path)
# Set the working directory and source the helper functions
setwd(config$paths$wd)
files <- list.files(config$paths$helper_functions, pattern = "\\.R$", full.names = TRUE)
sapply(files, source)
# TESTING ONLY
files <- list.files("Y:\\LabMembers\\MTillman\\GitRepos\\Stroke-R01\\src\\RCode\\plotter", pattern = "\\.R$", full.names = TRUE)
sapply(files, source)
# Create the folder to store the results of this analysis
analysis_name <- config$analysis_name
analysis_output_folder = file.path(config$paths$root_save, analysis_name)
if (!dir.exists(analysis_output_folder)) {
dir.create(analysis_output_folder)
}
# Initialize variables
# Factors
plot_grouping_factors <- config$plots$grouping_factors
fill_factor <- config$plots$fill_factor
all_factors_col_names <- config$all_factor_columns
# Levels in each factor
factors_levels_order <- config$factor_levels_order
factors_levels_to_remove <- config$factor_levels_to_remove
# Paths
data_file_path <- config$paths$data_file
colors<- config$plots$colors
# Linear mixed model & estimated marginal means formulae
lmer_formula <- config$stats$lmer_formula
emmeans_formula <- config$stats$emmeans_formula
#############################
## READ IN DATA
#############################
# Read the CSV file
all_data <- read_data(data_file_path, all_factors_col_names) # From fcns.R
# Order the levels of each factor for which the levels order was specified
factors_with_specified_levels_order <- names(factors_levels_order)
for (factor_name in factors_with_specified_levels_order) {
if (factor_name %in% names(all_data)) {
all_data[[factor_name]] <- factor(all_data[[factor_name]], levels = factors_levels_order[[factor_name]])
}
}
# Remove any levels of any factors that we don't want to analyze
factors_with_levels_to_remove <- names(factors_levels_to_remove)
for (factor_name in factors_with_levels_to_remove) {
all_data <- remove_levels(all_data, factor_name, factors_levels_to_remove[[factor_name]])
}
# Remove any levels of any factors that have no observations
for (col_name in names(all_data)) {
if (is.factor(all_data[[col_name]])) {
all_data[[col_name]] <- droplevels(all_data[[col_name]])
}
}
# Get the column names of interest from the data table
outcome_measures_cols <- names(all_data)[sapply(all_data, function(x) !is.factor(x))]
col_name = outcome_measures_cols[1]
emmeans_list <- list()
comps_list <- list()
# Run the hypothesis testing and plotting functions
for (col_name in outcome_measures_cols) {
if (!is.numeric(all_data[[col_name]])) {
print(paste("The column", col_name, " is not numeric."))
next
}
# Open the PDF device
pdf(file = file.path(analysis_output_folder, paste0(col_name, ".pdf")))
tryCatch(
{
# Create a data frame for the current column
curr_data <- curr_col_data(all_data, col_name, all_factors_col_names)
# Create the lmer model
lmer_model <- make_model(curr_data, lmer_formula, col_name)
# Get the marginal means
emmeans <- get_emmeans(lmer_model, emmeans_formula, col_name)
emmeans_list[[col_name]] <- emmeans
# Hypothesis tests
comps <- hyp_tests(lmer_model, curr_data, emmeans, col_name)
comps_list[[col_name]] <- comps
# Scatter plot to prep for significant difference bars
collapsed_df <- collapse_data(curr_data, c())
plot_result <- plot_for_diff_bars(collapsed_df, plot_grouping_factors, col_name, plot_type = "scatter", fill_factor=fill_factor)
plotted_df <- plot_result$df
gp_no_sig_diff_bars <- plot_result$gp
# Add the significant difference bars
result <- plot_sig_diff_bars(gp_no_sig_diff_bars, plotted_df, comps, lmer_model, plot_grouping_factors,
col_name, vert_bar_height=0.03, text_offset=0.005, min_y_distance=0.02, text_size=2,
show_p_values = TRUE, horz_offset = 0.008, step_increase=0.06)
gp_sig_diff_bars <- result$plot
print(gp_sig_diff_bars)
sig_diff_bars_df_scatter <- result$sig_diff_bars_df
# Summarize and plot the residuals of the model
summarize_model(lmer_model)
# Create the histogram
plot_all_histograms(curr_data, plot_grouping_factors, col_name, fill_factor = fill_factor)
}, error = function(e) {
message("Error processing column '", col_name, "': ", e$message)
plot(1, type="n", axes=FALSE, xlab="", ylab="")
# print("Error processing column ", col_name)
text(1, 1, paste("Error processing:", col_name, "\n", e$message), cex=1.2)
}, finally = {
dev.off()
}
)
}
config_path <- "Y:\\LabMembers\\MTillman\\GitRepos\\siesta\\src\\peak_occ_nights_within_subject.toml"
config <- configr::read.config(file = config_path)
setwd(config$paths$wd)
files <- list.files(config$paths$helper_functions, pattern = "\\.R$", full.names = TRUE)
sapply(files, source)
files <- list.files("Y:\\LabMembers\\MTillman\\GitRepos\\Stroke-R01\\src\\RCode\\plotter", pattern = "\\.R$", full.names = TRUE)
sapply(files, source)
analysis_name <- config$analysis_name
analysis_output_folder = file.path(config$paths$root_save, analysis_name)
if (!dir.exists(analysis_output_folder)) {
dir.create(analysis_output_folder)
}
plot_grouping_factors <- config$plots$grouping_factors
fill_factor <- config$plots$fill_factor
all_factors_col_names <- config$all_factor_columns
factors_levels_order <- config$factor_levels_order
factors_levels_to_remove <- config$factor_levels_to_remove
data_file_path <- config$paths$data_file
colors<- config$plots$colors
lmer_formula <- config$stats$lmer_formula
emmeans_formula <- config$stats$emmeans_formula
all_data <- read_data(data_file_path, all_factors_col_names)
View(all_data)
############################
## CONFIG
############################
# Read the config file
config_path <- "Y:\\LabMembers\\MTillman\\GitRepos\\siesta\\src\\peak_occ_nights_within_subject.toml"
config <- configr::read.config(file = config_path)
# Set the working directory and source the helper functions
setwd(config$paths$wd)
files <- list.files(config$paths$helper_functions, pattern = "\\.R$", full.names = TRUE)
sapply(files, source)
# TESTING ONLY
files <- list.files("Y:\\LabMembers\\MTillman\\GitRepos\\Stroke-R01\\src\\RCode\\plotter", pattern = "\\.R$", full.names = TRUE)
sapply(files, source)
# Create the folder to store the results of this analysis
analysis_name <- config$analysis_name
analysis_output_folder = file.path(config$paths$root_save, analysis_name)
if (!dir.exists(analysis_output_folder)) {
dir.create(analysis_output_folder)
}
# Initialize variables
# Factors
plot_grouping_factors <- config$plots$grouping_factors
fill_factor <- config$plots$fill_factor
all_factors_col_names <- config$all_factor_columns
# Levels in each factor
factors_levels_order <- config$factor_levels_order
factors_levels_to_remove <- config$factor_levels_to_remove
# Paths
data_file_path <- config$paths$data_file
colors<- config$plots$colors
# Linear mixed model & estimated marginal means formulae
lmer_formula <- config$stats$lmer_formula
emmeans_formula <- config$stats$emmeans_formula
all_data <- read_data(data_file_path, all_factors_col_names)
View(all_data)
factors_with_specified_levels_order <- names(factors_levels_order)
for (factor_name in factors_with_specified_levels_order) {
if (factor_name %in% names(all_data)) {
all_data[[factor_name]] <- factor(all_data[[factor_name]], levels = factors_levels_order[[factor_name]])
}
}
factors_with_levels_to_remove <- names(factors_levels_to_remove)
for (factor_name in factors_with_levels_to_remove) {
all_data <- remove_levels(all_data, factor_name, factors_levels_to_remove[[factor_name]])
}
View(all_data)
for (col_name in names(all_data)) {
if (is.factor(all_data[[col_name]])) {
all_data[[col_name]] <- droplevels(all_data[[col_name]])
}
}
outcome_measures_cols <- names(all_data)[sapply(all_data, function(x) !is.factor(x))]
col_name = outcome_measures_cols[1]
emmeans_list <- list()
comps_list <- list()
pdf(file = file.path(analysis_output_folder, paste0(col_name, ".pdf")))
curr_data <- curr_col_data(all_data, col_name, all_factors_col_names)
lmer_model <- make_model(curr_data, lmer_formula, col_name)
emmeans <- get_emmeans(lmer_model, emmeans_formula, col_name)
emmeans_formula
col_name
lmer_model
comps <- hyp_tests(lmer_model, curr_data, emmeans, col_name)
lmer_model <- make_model(curr_data, lmer_formula, col_name)
